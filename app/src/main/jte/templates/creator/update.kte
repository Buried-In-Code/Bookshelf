@import github.buriedincode.models.Book
@import github.buriedincode.models.Creator
@import github.buriedincode.models.Credit
@import github.buriedincode.models.Role
@import github.buriedincode.models.User
@import kotlin.collections.List
@param session: User
@param resource: Creator
@param books: List<Book>
@param roles: List<Role>

<!DOCTYPE html>
<html lang="en-GB" data-theme="dark">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Bookshelf</title>
    <link href="https://use.fontawesome.com/releases/v6.7.2/css/all.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bulma@1.0.4/css/bulma.min.css" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
@template.components.navbar(session = session)
<main class="section">
    <div class="container">
        <header class="block has-text-centered">
            <h1 class="title is-1">Updating ${resource.name}</h1>
        </header>
        <form class="mb-4" id="update-form" onsubmit="return false;">
            <div class="columns is-multiline is-centered is-desktop">
                <div class="column is-half-desktop">
                    <div class="box has-text-centered has-background-text-soft is-shadowless">
                        <h3 class="title is-3">Details</h3>
                        @template.components.forms.input(label = "Image Url", name = "image-url", value = resource.imageUrl, icon = "fa-solid fa-image")
                        @template.components.forms.input(label = "Name", name = "name", value = resource.name, icon = "fa-solid fa-heading")
                    </div>
                </div>
            </div>
        </form>
        <div class="columns is-multiline is-centered is-desktop">
            <div class="column is-half-desktop">
                <form id="add-credit-form" onsubmit="return false;">
                    <div class="box has-background-text-soft is-shadowless">
                        <h3 class="title is-3 has-text-centered">Credits</h3>
                        <div class="table-container">
                            <table class="table is-fullwidth has-background-text-soft">
                                <thead>
                                    <tr>
                                        <th class="has-text-info">Role</th>
                                        <th class="has-text-info">Book Title</th>
                                        <th class="has-text-info">Book Subtitle</th>
                                        <th class="has-text-info">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for(entry in resource.credits.sortedWith(compareBy<Credit> { it.role }.thenBy { it.book }))
                                        <tr>
                                            <td>${entry.role.title}</td>
                                            <td>${entry.book.title}</td>
                                            <td>${entry.book.subtitle}</td>
                                            <td>
                                                <div class="buttons is-centered">
                                                    <button class="button is-danger" id="remove-credit-${entry.book.id.value}-${entry.role.id.value}-button" onclick="removeCredit(${entry.book.id.value}, ${entry.role.id.value})" type="button">
                                                        <span class="icon">
                                                            <i class="fa-solid fa-minus"></i>
                                                        </span>
                                                        <span>Remove</span>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    @endfor
                                    <tr>
                                        <td>@template.components.forms.select.role(label = "", options = roles.sorted())</td>
                                        <td>@template.components.forms.select.book(label = "", options = books.sorted())</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-success" id="add-credit-button" onclick="addCredit()" type="button">
                                                    <span class="icon">
                                                        <i class="fa-solid fa-plus"></i>
                                                    </span>
                                                    <span>Add</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="buttons is-multiline is-centered">
            <button class="button is-success" id="update-button" onclick="submitUpdate()" type="submit">
                <span class="icon">
                    <i class="fa-solid fa-floppy-disk"></i>
                </span>
                <span>Update</span>
            </button>
            <button class="button is-danger" id="delete-button" onclick="submitDelete()" type="button">
                <span class="icon">
                    <i class="fa-solid fa-trash"></i>
                </span>
                <span>Delete</span>
            </button>
            <button class="button is-warning" onclick="window.location = document.referrer;" type="button">
                <span class="icon">
                    <i class="fa-solid fa-xmark"></i>
                </span>
                <span>Cancel</span>
            </button>
        </div>
    </div>
</main>
@template.components.footer()
<script src="/static/js/scripts.js" type="text/javascript"></script>
<script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
<script src="/static/js/validate.js" type="text/javascript"></script>
<script type="text/javascript">
async function addCredit() {
  const caller = "add-credit-button";
  const form = document.getElementById("add-credit-form");
  const jsonData = Object.fromEntries(new FormData(form));
  const body = {
    book: jsonData["book-id"],
    role: jsonData["role-id"],
  };

  addLoading(caller);
  const response = await submitRequest("/api/creators/${resource.id.value}/credits", "POST", body);
  if (response !== null) {
    form.reset();
    window.location.reload();
  }
  removeLoading(caller);
}

async function removeCredit(bookId, roleId) {
  @raw
    const caller = `remove-credit-${bookId}-${roleId}-button`;
  @endraw
  const body = {
    book: bookId,
    role: roleId,
  };

  addLoading(caller);
  const response = await submitRequest("/api/creators/${resource.id.value}/credits", "DELETE", body);
  if (response !== null)
    window.location();
  removeLoading(caller);
}

async function submitUpdate() {
  const caller = "update-button";
  addLoading(caller);

  if (await creatorValidation()) {
    const form = document.getElementById("update-form");
    const formData = Object.fromEntries(new FormData(form));
    const body = {
      credits: [@for(entry in resource.credits){book: ${entry.book.id.value}, role: ${entry.role.id.value}},@endfor],
      imageUrl: formData["image-url"].trim() || null,
      name: formData["name"].trim(),
    };

    const response = await submitRequest("/api/creators/${resource.id.value}", "PUT", body);
    if (response !== null) {
      form.reset();
      window.location = "/creators/${resource.id.value}";
    }
  }

  removeLoading(caller);
}

async function submitDelete() {
  const caller = "delete-button";
  addLoading(caller);

  const response = await submitRequest("/api/creators/${resource.id.value}", "DELETE");
  if (response !== null)
    window.location = "/creators";

  removeLoading(caller);
}

</script>
</body>
</html>