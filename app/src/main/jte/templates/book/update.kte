@import github.buriedincode.bookshelf.models.Book
@import github.buriedincode.bookshelf.models.BookSeries
@import github.buriedincode.bookshelf.models.Creator
@import github.buriedincode.bookshelf.models.Credit
@import github.buriedincode.bookshelf.models.Format
@import github.buriedincode.bookshelf.models.Publisher
@import github.buriedincode.bookshelf.models.Role
@import github.buriedincode.bookshelf.models.Series
@import github.buriedincode.bookshelf.models.User
@import github.buriedincode.bookshelf.Utils.toString
@import kotlinx.datetime.LocalDate
@import kotlin.collections.List
@param session: User
@param resource: Book
@param creators: List<Creator>
@param formats: List<Format>
@param publishers: List<Publisher>
@param roles: List<Role>
@param series: List<Series>

<!DOCTYPE html>
<html lang="en-GB" data-theme="villain">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Bookshelf</title>
    <link href="https://use.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bulma@1.0.1/css/bulma.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/gh/Buried-In-Code/Vegeta@0.2.0/css/vegeta.min.css" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
@template.components.navbar(session = session)
<main class="section">
    <div class="container">
        <header class="block has-text-centered">
            <h1 class="title is-1">Updating ${resource.title}</h1>
        </header>
        <form id="update-form" onsubmit="return false;">
            <div class="columns is-multiline is-centered is-desktop">
                <div class="column is-half-desktop">
                    <div class="box has-background-text-soft is-shadowless">
                        <h3 class="title is-3">Details</h3>
                        @template.components.forms.select.format(label = "Format", options = formats.sorted(), selected = resource.format)
                        @template.components.forms.input(label = "Image Url", name = "image-url", icon = "fa-solid fa-image", value = resource.imageUrl)
                        @template.components.forms.input_date(label = "Publish Date", name = "publish-date", value = resource.publishDate)
                        @template.components.forms.select.publisher(label = "Publisher", options = publishers.sorted(), selected = resource.publisher)
                        @template.components.forms.input(label = "Subtitle", name = "subtitle", icon = "fa-solid fa-heading", value = resource.subtitle)
                        @template.components.forms.input(label = "Title", name = "title", icon = "fa-solid fa-heading", value = resource.title)
                    </div>
                </div>
                <div class="column is-half-desktop">
                    <div class="box has-background-text-soft is-shadowless">
                        <h3 class="title is-3">Summary</h3>
                        @template.components.forms.textarea(label = "Summary", name = "summary", value = resource.summary)
                    </div>
                </div>
                <div class="column is-half-desktop">
                    <div class="box has-background-text-soft is-shadowless">
                        <h3 class="title is-3">Identifiers</h3>
                        @template.components.forms.input(label = "Goodreads", name = "goodreads", icon = "fa-brands fa-goodreads", value = resource.goodreads)
                        @template.components.forms.input(label = "Google Books", name = "google-books", icon = "fa-brands fa-google", value = resource.googleBooks)
                        @template.components.forms.input(label = "Isbn", name = "isbn", icon = "fa-solid fa-link", value = resource.isbn)
                        @template.components.forms.input(label = "LibraryThing", name = "library-thing", icon = "fa-solid fa-link", value = resource.libraryThing)
                        @template.components.forms.input(label = "OpenLibrary", name = "open-library", icon = "fa-solid fa-link", value = resource.openLibrary)
                    </div>
                </div>
            </div>
        </form>
        <div class="columns is-multiline is-centered is-desktop">
            <div class="column is-half-desktop">
                <form id="add-credit-form" onsubmit="return false;">
                    <div class="box has-background-text-soft is-shadowless">
                        <h3 class="title is-3 has-text-centered">Credits</h3>
                        <div class="table-container">
                            <table class="table is-fullwidth has-background-text-soft">
                                <thead>
                                    <tr>
                                        <th class="has-text-info">Role</th>
                                        <th class="has-text-info">Creator</th>
                                        <th class="has-text-info">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for(entry in resource.credits.sortedWith(compareBy<Credit> { it.role }.thenBy { it.creator }))
                                        <tr>
                                            <td>${entry.role.title}</td>
                                            <td>${entry.creator.name}</td>
                                            <td>
                                                <div class="buttons is-centered">
                                                    <button class="button is-danger" id="remove-credit-${entry.creator.id.value}-${entry.role.id.value}-button" onclick="removeCredit(${entry.creator.id.value}, ${entry.role.id.value})" type="button">
                                                        <span class="icon">
                                                            <i class="fa-solid fa-minus"></i>
                                                        </span>
                                                        <span>Remove</span>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    @endfor
                                    <tr>
                                        <td>@template.components.forms.select.role(label = "", options = roles.sorted())</td>
                                        <td>@template.components.forms.select.creator(label = "", options = creators.sorted())</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-success" id="add-credit-button" onclick="addCredit()" type="button">
                                                    <span class="icon">
                                                        <i class="fa-solid fa-plus"></i>
                                                    </span>
                                                    <span>Add</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </form>
            </div>
            <div class="column is-half-desktop">
                <form id="add-series-form" onsubmit="return false;">
                    <div class="box has-background-text-soft is-shadowless">
                        <h3 class="title is-3 has-text-centered">Series</h3>
                        <div class="table-container">
                            <table class="table is-fullwidth has-background-text-soft">
                                <thead>
                                    <tr>
                                        <th class="has-text-info">Series Title</th>
                                        <th class="has-text-info">Series Number</th>
                                        <th class="has-text-info">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for(entry in resource.series.sortedWith(compareBy<BookSeries> {it.number ?: Int.MAX_VALUE}.thenBy { it.series }))
                                        <tr>
                                            <td>${entry.series.title}</td>
                                            <td>${entry.number}</td>
                                            <td>
                                                <div class="buttons is-centered">
                                                    <button class="button is-danger" id="remove-series-${entry.series.id.value}-button" onclick="removeSeries(${entry.series.id.value})" type="button">
                                                        <span class="icon">
                                                            <i class="fa-solid fa-minus"></i>
                                                        </span>
                                                        <span>Remove</span>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    @endfor
                                    <tr>
                                        <td>@template.components.forms.select.series(label = "", options = series.sorted())</td>
                                        <td>@template.components.forms.input_int(label = "", name = "number")</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-success" id="add-series-button" onclick="addSeries()" type="button">
                                                    <span class="icon">
                                                        <i class="fa-solid fa-plus"></i>
                                                    </span>
                                                    <span>Add</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="buttons is-multiline is-centered mt-4">
            <button class="button is-success" id="update-button" onclick="submitUpdate(${resource.id.value})" type="submit">
                <span class="icon">
                    <i class="fa-solid fa-floppy-disk"></i>
                </span>
                <span>Update</span>
            </button>
            <button class="button is-warning" id="import-button" onclick="submitImport()" type="button">
                <span class="icon">
                    <i class="fa-solid fa-rotate-left"></i>
                </span>
                <span>Re-Import</span>
            </button>
            <button class="button is-danger" id="delete-button" onclick="submitDelete(${resource.id.value})" type="button">
                <span class="icon">
                    <i class="fa-solid fa-trash"></i>
                </span>
                <span>Delete</span>
            </button>
            <button class="button is-warning" onclick="window.location = document.referrer;" type="button">
                <span class="icon">
                    <i class="fa-solid fa-xmark"></i>
                </span>
                <span>Cancel</span>
            </button>
        </div>
    </div>
</main>
@template.components.footer()
<script src="/static/js/scripts.js" type="text/javascript"></script>
<script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
<script src="/static/js/validate.js" type="text/javascript"></script>
<script src="/static/js/book.js" type="text/javascript"></script>
<script type="text/javascript">
async function addCredit() {
  const caller = "add-credit-button";
  const form = document.getElementById("add-credit-form");
  const jsonData = Object.fromEntries(new FormData(form));
  const body = {
    creator: jsonData["creator-id"],
    role: jsonData["role-id"],
  };

  addLoading(caller);
  const response = await submitRequest("/api/books/${resource.id.value}/credits", "POST", body);
  if (response !== null) {
    form.reset();
    window.location.reload();
  }
  removeLoading(caller);
}

async function removeCredit(creatorId, roleId) {
  @raw
    const caller = `remove-credit-${creatorId}-${roleId}-button`;
  @endraw
  const body = {
    creator: creatorId,
    role: roleId,
  };

  addLoading(caller);
  const response = await submitRequest("/api/books/${resource.id.value}/credits", "DELETE", body);
  if (response !== null)
    window.location();
  removeLoading(caller);
}

async function addSeries() {
  const caller = "add-series-button";
  const form = document.getElementById("add-series-form");
  const formData = Object.fromEntries(new FormData(form));
  const body = {
    series: formData["series-id"],
    number: formData["number"] || null,
  };

  addLoading(caller);
  const response = await submitRequest("/api/books/${resource.id.value}/series", "POST", body);
  if (response !== null) {
    form.reset();
    window.location.reload();
  }
  removeLoading(caller);
}

async function removeSeries(seriesId) {
  @raw
    const caller = `remove-series-${seriesId}-button`;
  @endraw
  const body = {
    id: seriesId,
  };

  addLoading(caller);
  const response = await submitRequest("/api/books/${resource.id.value}/series", "DELETE", body);
  if (response !== null)
    window.location.reload();
  removeLoading(caller);
}

async function submitImport() {
  const caller = "import-button";
  addLoading(caller);

  const response = await submitRequest("/api/books/${resource.id.value}/import", "POST");
  if (response !== null)
    window.location = "/books/${resource.id.value}";

  removeLoading(caller);
}
</script>
</body>
</html>
