<!DOCTYPE html>
<html lang="en-GB" data-theme="villain">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Bookshelf</title>
    <link href="https://use.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bulma@1.0.1/css/bulma.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/gh/Buried-In-Code/Vegeta@0.2.0/css/vegeta.min.css" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
@template.components.navbar()
<main class="section">
    <div class="container">
        <header class="block has-text-centered">
            <h1 class="title is-1">Search for a Book</h1>
        </header>
        <div class="columns is-multiline is-centered is-desktop">
            <form id="search-form" onsubmit="return false;">
                <div class="column is-half-desktop">
                    <div class="box has-background-text-soft is-shadowless">
                        @template.components.forms.input(label = "Title", name = "title", icon = "fa-solid fa-heading")
                    </div>
                </div>
            </form>
        </div>
        <div class="buttons is-multiline is-centered mt-4">
            <button class="button is-success" id="search-button" onclick="submitSearch()" type="submit">
                <span class="icon">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </span>
                <span>Search</span>
            </button>
            <button class="button is-warning" onclick="window.location = document.referrer;" type="button">
                <span class="icon">
                    <i class="fa-solid fa-xmark"></i>
                </span>
                <span>Cancel</span>
            </button>
        </div>
        <nav class="level is-mobile">
            <div class="level-left">
                <p class="has-text-centered">
                    <span id="count">0 Results</span>
                </p>
            </div>
            <div class="level-right"></div>
        </nav>
        <div class="columns is-multiline is-centered is-desktop" id="results">
        </div>
    </div>
</main>
@template.components.footer()
<script src="//cdn.jsdelivr.net/npm/eruda"></script>
<script>eruda.init();</script>
<script src="/static/js/scripts.js" type="text/javascript"></script>
<script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
<script type="text/javascript">
  async function submitSearch() {
    const caller = "search-button";
    addLoading(caller);

    const form = document.getElementById("search-form");
    const formData = Object.fromEntries(new FormData(form));
    const body = {
      title: formData["title"].trim()
    }
    const response = await submitRequest("/api/books/search", "POST", body);

    if (response !== null) {
      const results = response.body.filter((entry) => {
        return entry.editionKey.length > 0;
      });
      const count = document.getElementById("count");
      const resultCount = results.length;
      @raw
        count.innerHTML = `${resultCount} Result${resultCount !== 1 ? 's' : ''}`;
      @endraw
      const resultColumns = document.getElementById("results");
      resultColumns.innerHTML = "";
      results.forEach(entry => {
        const column = createColumn(entry);
        resultColumns.appendChild(column);
      });
    }

    removeLoading(caller);
  }

  function createColumn(entry) {
    const column = document.createElement("div");
    column.className = "column is-half-desktop is-one-third-fullhd";

    const box = document.createElement("a");
    box.className = "box has-text-centered";
    @raw
      box.href = `https://openlibrary.org${entry.key}`;
    @endraw

    const boxColumns = document.createElement("div");
    boxColumns.className = "columns is-mobile";

    const imageColumn = createImageColumn(entry);
    const textColumn = createTextColumn(entry);

    boxColumns.appendChild(imageColumn);
    boxColumns.appendChild(textColumn);

    box.appendChild(boxColumns);
    column.appendChild(box);

    return column;
  }

  function createImageColumn(entry) {
    const imageColumn = document.createElement("div");
    imageColumn.className = "column is-one-third";

    const imageFigure = document.createElement("figure");
    imageFigure.className = "image is-2by3";

    const image = document.createElement("img");
    image.loading = "lazy";
    @raw
      image.src = entry.coverEditionKey ? `https://covers.openlibrary.org/b/olid/${entry.coverEditionKey.split("/").pop()}-L.jpg` : "https://via.placeholder.com/750x500";
    @endraw

    imageFigure.appendChild(image);
    imageColumn.appendChild(imageFigure);

    return imageColumn;
  }

  function createTextColumn(entry) {
    const textColumn = document.createElement("div");
    textColumn.className = "column content";

    const title = document.createElement("h5");
    title.className = "title is-5";
    title.innerHTML = entry.title;
    textColumn.appendChild(title);

    entry.editionKey.slice(0,5).forEach(edition => {
      const editionText = document.createElement("p");
      const editionLink = document.createElement("a");
      @raw
        editionLink.href = `https://openlibrary.org/edition/${edition}`;
      @endraw
      editionLink.innerHTML = edition;
      editionText.appendChild(editionLink);
      textColumn.appendChild(editionText);
    });

    return textColumn;
  }
</script>
</body>
</html>
