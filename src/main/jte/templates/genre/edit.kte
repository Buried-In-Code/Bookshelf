@import java.util.List
@import github.buriedincode.bookshelf.models.Book
@import github.buriedincode.bookshelf.models.Genre
@param genre: Genre
@param books: List<Book>

<!DOCTYPE html>
<html lang="en-GB">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Bookshelf</title>
    <link href="https://use.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet">
    <link id="dark-theme" href="/static/css/custom-bulma-dark.css" rel="stylesheet">
    <link id="light-theme" disabled href="/static/css/custom-bulma-light.css" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
    @template.components.navbar()
    <main class="section">
        <div class="container">
            <header class="block has-text-centered">
                <h1 class="title is-1">Edit Genre</h1>
            </header>
            <div class="box">
                <form id="edit-genre-form" onsubmit="return false;">
                    @template.components.forms.input(label = "Title", name = "title", value = genre.title)
                </form>
            </div>
            <h3 class="subtitle is-3 has-text-primary-dark">Books</h3>
            <div class="box">
                <div class="table-container">
                    <form id="add-book-form" onsubmit="return false;">
                        <table class="table is-fullwidth">
                            <thead>
                                <tr>
                                    <th class="is-size-5 has-text-info">Book Title</th>
                                    <th class="is-size-5 has-text-info">Book Subtitle</th>
                                    <th class="is-size-5 has-text-info">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for(entry in genre.books)
                                    <tr>
                                        <td>${entry.title}</td>
                                        <td>${entry.subtitle}</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-danger" id="remove-book-${entry.id.value}-button" onclick="removeBook(${entry.id.value})" type="button">
                                                    <span class="icon">
                                                        <i class="fa-solid fa-minus"></i>
                                                    </span>
                                                    <span>Remove</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                @endfor
                                <tr>
                                    <td>@template.components.forms.select.book(label = "", options = books)</td>
                                    <td></td>
                                    <td>
                                        <div class="buttons is-centered">
                                            <button class="button is-success" id="add-book-button" onclick="addBook()" type="button">
                                                <span class="icon">
                                                    <i class="fa-solid fa-plus"></i>
                                                </span>
                                                <span>Add</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </form>
                </div>
            </div>
            <div class="buttons is-multiline is-centered">
                <button class="button is-success" id="save-genre-button" onclick="saveGenre()" type="button">
                    <span class="icon">
                        <i class="fa-solid fa-floppy-disk"></i>
                    </span>
                    <span>Save</span>
                </button>
            </div>
        </div>
    </main>
    @template.components.footer()
    <script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
    <script src="/static/js/scripts.js" type="text/javascript"></script>
    <script type="text/javascript">
        function addBook() {
            const caller = "add-book-button";
            let form = document.getElementById("add-book-form");
            let formData = Object.fromEntries(new FormData(form));
            console.log(formData);

            addLoading(caller);
            fetch("/api/v0/genres/${genre.id.value}/books", {
                method: "POST",
                headers: headers,
                body: JSON.stringify({
                    "id": formData["book-id"],
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText}: ${msg.details}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function removeBook(bookId) {
            @raw
                const caller = `remove-book-${bookId}-button`;
            @endraw

            addLoading(caller);
            fetch("/api/v0/genres/${genre.id.value}/books", {
                method: "DELETE",
                headers: headers,
                body: JSON.stringify({
                    "id": bookId,
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText}: ${msg.details}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function saveGenre() {
            const caller = "save-genre-button";
            let form = document.getElementById("edit-genre-form");
            let formData = Object.fromEntries(new FormData(form));
            console.log(formData);

            addLoading(caller);
            fetch("/api/v0/genres/${genre.id.value}", {
                method: "PUT",
                headers: headers,
                body: JSON.stringify({
                    "title": formData["title"],
                    "bookIds": ${genre.books.map{ it.id.value }.toList().toString()},
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                window.location = "/genres/${genre.id.value}";
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText}: ${msg.details}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
    </script>
</body>
</html>