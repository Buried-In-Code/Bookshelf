@import java.util.List
@import github.buriedincode.bookshelf.models.Book
@import github.buriedincode.bookshelf.models.Creator
@import github.buriedincode.bookshelf.models.Genre
@import github.buriedincode.bookshelf.models.Publisher
@import github.buriedincode.bookshelf.models.Role
@import github.buriedincode.bookshelf.models.Series
@param result: Book
@param creators: List<Creator>
@param genres: List<Genre>
@param publishers: List<Publisher>
@param roles: List<Role>
@param series: List<Series>

<!DOCTYPE html>
<html lang="en-GB">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Bookshelf</title>
    <link href="https://use.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet">
    <link id="dark-theme" href="/static/css/custom-bulma-dark.css" rel="stylesheet">
    <link id="light-theme" disabled href="/static/css/custom-bulma-light.css" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
    @template.components.navbar()
    <main class="section">
        <div class="container">
            <header class="block has-text-centered">
                <h1 class="title is-1">Edit Book</h1>
            </header>
            <div class="box">
                <form id="edit-book-form" onsubmit="return false;">
                    @template.components.forms.textarea(label = "Description", name = "Description", value = result.description)
                    @template.components.forms.select.format(label = "Format", selected = result.format)
                    @template.components.forms.input(label = "Image Url", name = "image-url", value = result.imageUrl)
                    @template.components.forms.input(label = "Publish Date", name = "publish-date", value = result.publishDate?.toString())
                    @template.components.forms.select.publisher(label = "Publisher", options = publishers, selected = result.publisher)
                    @template.components.forms.input(label = "Subtitle", name = "subtitle", value = result.subtitle)
                    @template.components.forms.input(label = "Title", name = "title", value = result.title)
                    <h4 class="subtitle is-4 has-text-centered has-text-info-light">Identifiers</h4>
                    @template.components.forms.input(label = "Goodreads", name = "goodreads", value = result.goodreadsId)
                    @template.components.forms.input(label = "Google Books", name = "google-books", value = result.googleBooksId)
                    @template.components.forms.input(label = "Isbn", name = "isbn", value = result.isbn)
                    @template.components.forms.input(label = "LibraryThing", name = "library-thing", value = result.libraryThingId)
                    @template.components.forms.input(label = "OpenLibrary", name = "open-library", value = result.openLibraryId)
                </form>
            </div>
            <h3 class="subtitle is-3 has-text-primary-dark">Credits</h3>
            <div class="box">
                <div class="table-container">
                    <form id="add-credit-form" onsubmit="return false;">
                        <table class="table is-fullwidth">
                            <thead>
                                <tr>
                                    <th class="is-size-5 has-text-info">Creator</th>
                                    <th class="is-size-5 has-text-info">Role</th>
                                    <th class="is-size-5 has-text-info">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for(entry in result.credits)
                                    <tr>
                                        <td>${entry.creator.name}</td>
                                        <td>${entry.role.title}</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-danger" id="remove-creator-${entry.creator.id.value}-role-${entry.role.id.value}-button" onclick="removeCredit(${entry.creator.id.value}, ${entry.role.id.value})" type="button">
                                                        <span class="icon">
                                                            <i class="fa-solid fa-minus"></i>
                                                        </span>
                                                    <span>Remove</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                @endfor
                                <tr>
                                    <td>@template.components.forms.select.creator(label = "", options = creators)</td>
                                    <td>@template.components.forms.select.role(label = "", options = roles)</td>
                                    <td>
                                        <div class="buttons is-centered">
                                            <button class="button is-success" id="add-credit-button" onclick="addCredit()" type="button">
                                                <span class="icon">
                                                    <i class="fa-solid fa-plus"></i>
                                                </span>
                                                <span>Add</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </form>
                </div>
            </div>
            <h3 class="subtitle is-3 has-text-primary-dark">Genres</h3>
            <div class="box">
                <div class="table-container">
                    <form id="add-genre-form" onsubmit="return false;">
                        <table class="table is-fullwidth">
                            <thead>
                                <tr>
                                    <th class="is-size-5 has-text-info">Genre Title</th>
                                    <th class="is-size-5 has-text-info">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for(entry in result.genres)
                                    <tr>
                                        <td>${entry.title}</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-danger" id="remove-genre-${entry.id.value}-button" onclick="removeGenre(${entry.id.value})" type="button">
                                                    <span class="icon">
                                                        <i class="fa-solid fa-minus"></i>
                                                    </span>
                                                    <span>Remove</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                @endfor
                                <tr>
                                    <td>@template.components.forms.select.genre(label = "", options = genres)</td>
                                    <td>
                                        <div class="buttons is-centered">
                                            <button class="button is-success" id="add-genre-button" onclick="addGenre()" type="button">
                                                <span class="icon">
                                                    <i class="fa-solid fa-plus"></i>
                                                </span>
                                                <span>Add</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </form>
                </div>
            </div>
            <h3 class="subtitle is-3 has-text-primary-dark">Series</h3>
            <div class="box">
                <div class="table-container">
                    <form id="add-series-form" onsubmit="return false;">
                        <table class="table is-fullwidth">
                            <thead>
                            <tr>
                                <th class="is-size-5 has-text-info">Series Title</th>
                                <th class="is-size-5 has-text-info">Series Number</th>
                                <th class="is-size-5 has-text-info">Action</th>
                            </tr>
                            </thead>
                            <tbody>
                                @for(entry in result.series)
                                    <tr>
                                        <td>${entry.series.title}</td>
                                        <td>${entry.number}</td>
                                        <td>
                                            <div class="buttons is-centered">
                                                <button class="button is-danger" id="remove-series-${entry.series.id.value}-button" onclick="removeSeries(${entry.series.id.value})" type="button">
                                                    <span class="icon">
                                                        <i class="fa-solid fa-minus"></i>
                                                    </span>
                                                    <span>Remove</span>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                @endfor
                                <tr>
                                    <td>@template.components.forms.select.series(label = "", options = series)</td>
                                    <td>@template.components.forms.input_number(label = "", name = "series-number")</td>
                                    <td>
                                        <div class="buttons is-centered">
                                            <button class="button is-success" id="add-series-button" onclick="addSeries()" type="button">
                                                <span class="icon">
                                                    <i class="fa-solid fa-plus"></i>
                                                </span>
                                                <span>Add</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </form>
                </div>
            </div>
            <div class="buttons is-multiline is-centered">
                <button class="button is-success" id="save-book-button" onclick="saveBook()" type="button">
                    <span class="icon">
                        <i class="fa-solid fa-floppy-disk"></i>
                    </span>
                    <span>Save</span>
                </button>
                <button class="button is-warning" id="refresh-book-button" onclick="refreshBook()" type="button">
                    <span class="icon">
                        <i class="fa-solid fa-rotate-left"></i>
                    </span>
                    <span>Refresh</span>
                </button>
            </div>
        </div>
    </main>
    @template.components.footer()
    <script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
    <script src="/static/js/scripts.js" type="text/javascript"></script>
    <script type="text/javascript">
        function addCredit() {
            const caller = "add-credit-button";
            let form = document.getElementById("add-credit-form");
            let formData = Object.fromEntries(new FormData(form));
            console.log(formData);

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/credits", {
                method: "PATCH",
                headers: headers,
                body: JSON.stringify({
                    "creatorId": formData["creator-id"],
                    "roleId": formData["role-id"],
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                form.reset();
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function removeCredit(creatorId, roleId) {
            @raw
                const caller = `remove-creator-${creatorId}-role-${roleId}-button`;
            @endraw

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/credits", {
                method: "DELETE",
                headers: headers,
                body: JSON.stringify({
                    "creatorId": creatorId,
                    "roleId": roleId,
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function addGenre() {
            const caller = "add-genre-button";
            let form = document.getElementById("add-genre-form");
            let formData = Object.fromEntries(new FormData(form));
            console.log(formData);

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/genres", {
                method: "PATCH",
                headers: headers,
                body: JSON.stringify({
                    "id": formData["genre-id"],
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                form.reset();
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function removeGenre(genreId) {
            @raw
                const caller = `remove-genre-${genreId}-button`;
            @endraw

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/genres", {
                method: "DELETE",
                headers: headers,
                body: JSON.stringify({
                    "id": genreId,
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function addSeries() {
            const caller = "add-series-button";
            let form = document.getElementById("add-series-form");
            let formData = Object.fromEntries(new FormData(form));
            console.log(formData);

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/series", {
                method: "PATCH",
                headers: headers,
                body: JSON.stringify({
                    "seriesId": formData["series-id"],
                    "number": formData["series-number"],
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                form.reset();
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function removeSeries(seriesId) {
            @raw
                const caller = `remove-series-${seriesId}-button`;
            @endraw

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/series", {
                method: "DELETE",
                headers: headers,
                body: JSON.stringify({
                    "id": seriesId,
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                window.location.reload();
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function saveBook() {
            const caller = "save-book-button";
            let form = document.getElementById("edit-book-form");
            let formData = Object.fromEntries(new FormData(form));
            console.log(formData);

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}", {
                method: "PUT",
                headers: headers,
                body: JSON.stringify({
                    "credits": ${result.credits.map { mapOf("creatorId" to it.creator.id.value, "roleId" to it.role.id.value) }.toList().toString()},
                    "description": formData["description"] || null,
                    "format": formData["format"] || "PAPERBACK",
                    "genreIds": ${result.genres.map { it.id.value }.toList().toString()},
                    "goodreadsId": formData["goodreads"] || null,
                    "googleBooksId": formData["google-books"] || null,
                    "imageUrl": formData["image-url"] || null,
                    "isCollected": ${result.isCollected},
                    "isbn": formData["isbn"] || null,
                    "libraryThingId": formData["library-thing"] || null,
                    "openLibraryId": formData["open-library"] || null,
                    "publishDate": formData["publish-date"] || null,
                    "publisherId": formData["publisher-id"] || null,
                    "readerIds": ${result.readers.map { it.id.value }.toList().toString()},
                    "series": ${result.series.map { mapOf("seriesId" to it.series.id.value, "number" to it.number) }.toList().toString()},
                    "subtitle": formData["subtitle"] || null,
                    "title": formData["title"],
                    "wisherIds": ${result.wishers.map { it.id.value }.toList().toString()},
                }),
            }).then((response) => {
                if (!response.ok){
                    return Promise.reject(response);
                }
                form.reset();
                window.location = "/books/${result.id.value}";
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
        function refreshBook() {
            const caller = "refresh-book-button";

            addLoading(caller);
            fetch("/api/v0.0/books/${result.id.value}/refresh", {
                method: "PUT",
                headers: headers,
            }).then((response) => {
                if (!response.ok) {
                    return Promise.reject(response);
                }
                window.location = "/books/${result.id.value}";
            }).catch((response) => response.json().then((msg) => {
                @raw
                    alert(`${response.status} ${response.statusText} => ${msg.title}`);
                @endraw
            })).finally(() => removeLoading(caller));
        }
    </script>
</body>
</html>