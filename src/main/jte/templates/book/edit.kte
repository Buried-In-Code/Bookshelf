@import kotlin.collections.List
@import java.time.LocalDate
@import github.buriedincode.bookshelf.models.Book
@import github.buriedincode.bookshelf.models.BookCreatorRole
@import github.buriedincode.bookshelf.models.BookSeries
@import github.buriedincode.bookshelf.models.Creator
@import github.buriedincode.bookshelf.models.Genre
@import github.buriedincode.bookshelf.models.Publisher
@import github.buriedincode.bookshelf.models.Role
@import github.buriedincode.bookshelf.models.Series
@import github.buriedincode.bookshelf.models.User
@import github.buriedincode.bookshelf.Utils.DATE_FORMATTER
@import gg.jte.support.ForSupport
@param resource: Book
@param session: User
@param creators: List<Creator>
@param genres: List<Genre>
@param publishers: List<Publisher>
@param roles: List<Role>
@param series: List<Series>

<!DOCTYPE html>
<html lang="en-GB">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Bookshelf</title>
    <link href="https://use.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet">
    <link id="dark-theme" href="/static/css/custom-bulma-dark.css" rel="stylesheet">
    <link id="light-theme" disabled href="/static/css/custom-bulma-light.css" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
@template.components.navbar(session = session)
<main class="section">
    <div class="container">
        <header class="block has-text-centered">
            <h1 class="title is-1">Edit Book</h1>
        </header>
        <div class="box">
            <form id="edit-book-form" onsubmit="return false;">
                @template.components.forms.textarea(label = "Description", name = "description", value = resource.description)
                @template.components.forms.select.format(label = "Format", selected = resource.format)
                @template.components.forms.input(label = "Image Url", name = "image-url", value = resource.imageUrl)
                @template.components.forms.input(label = "Publish Date", name = "publish-date", value = resource.publishDate?.toString())
                @template.components.forms.select.publisher(label = "Publisher", options = publishers.sorted(), selected = resource.publisher)
                @template.components.forms.input(label = "Subtitle", name = "subtitle", value = resource.subtitle)
                @template.components.forms.input(label = "Title", name = "title", value = resource.title)
                <h4 class="subtitle is-4 has-text-centered has-text-info-light">Identifiers</h4>
                @template.components.forms.input(label = "Goodreads", name = "goodreads", value = resource.goodreadsId)
                @template.components.forms.input(label = "Google Books", name = "google-books", value = resource.googleBooksId)
                @template.components.forms.input(label = "Isbn", name = "isbn", value = resource.isbn)
                @template.components.forms.input(label = "LibraryThing", name = "library-thing", value = resource.libraryThingId)
                @template.components.forms.input(label = "OpenLibrary", name = "open-library", value = resource.openLibraryId)
            </form>
        </div>
        <h3 class="subtitle is-3 has-text-primary-dark">Credits</h3>
        <div class="box">
            <div class="table-container">
                <form id="add-credit-form" onsubmit="return false;">
                    <table class="table is-fullwidth">
                        <thead>
                        <tr>
                            <th class="is-size-5 has-text-info">Role</th>
                            <th class="is-size-5 has-text-info">Creator</th>
                            <th class="is-size-5 has-text-info">Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        @for(entry in resource.credits.sortedWith(compareBy<BookCreatorRole> { it.role }.thenBy { it.creator }))
                            <tr>
                                <td>${entry.role.title}</td>
                                <td>${entry.creator.name}</td>
                                <td>
                                    <div class="buttons is-centered">
                                        <button class="button is-danger" id="remove-role-${entry.role.id.value}-creator-${entry.creator.id.value}-button" onclick="removeCredit(${entry.role.id.value}, ${entry.creator.id.value})" type="button">
                                            <span class="icon">
                                                <i class="fa-solid fa-minus"></i>
                                            </span>
                                            <span>Remove</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        @endfor
                        <tr>
                            <td>@template.components.forms.select.role(label = "", options = roles.sorted())</td>
                            <td>@template.components.forms.select.creator(label = "", options = creators.sorted())</td>
                            <td>
                                <div class="buttons is-centered">
                                    <button class="button is-success" id="add-credit-button" onclick="addCredit()" type="button">
                                        <span class="icon">
                                            <i class="fa-solid fa-plus"></i>
                                        </span>
                                        <span>Add</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
        <h3 class="subtitle is-3 has-text-primary-dark">Genres</h3>
        <div class="box">
            <div class="table-container">
                <form id="add-genre-form" onsubmit="return false;">
                    <table class="table is-fullwidth">
                        <thead>
                        <tr>
                            <th class="is-size-5 has-text-info">Genre Title</th>
                            <th class="is-size-5 has-text-info">Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        @for(entry in resource.genres.sorted())
                            <tr>
                                <td>${entry.title}</td>
                                <td>
                                    <div class="buttons is-centered">
                                        <button class="button is-danger" id="remove-genre-${entry.id.value}-button" onclick="removeGenre(${entry.id.value})" type="button">
                                            <span class="icon">
                                                <i class="fa-solid fa-minus"></i>
                                            </span>
                                            <span>Remove</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        @endfor
                        <tr>
                            <td>@template.components.forms.select.genre(label = "", options = genres.sorted())</td>
                            <td>
                                <div class="buttons is-centered">
                                    <button class="button is-success" id="add-genre-button" onclick="addGenre()" type="button">
                                        <span class="icon">
                                            <i class="fa-solid fa-plus"></i>
                                        </span>
                                        <span>Add</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
        <h3 class="subtitle is-3 has-text-primary-dark">Series</h3>
        <div class="box">
            <div class="table-container">
                <form id="add-series-form" onsubmit="return false;">
                    <table class="table is-fullwidth">
                        <thead>
                        <tr>
                            <th class="is-size-5 has-text-info">Series Title</th>
                            <th class="is-size-5 has-text-info">Series Number</th>
                            <th class="is-size-5 has-text-info">Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        @for(entry in resource.series.sortedWith(compareBy<BookSeries> {it.number ?: Int.MAX_VALUE}.thenBy { it.series }))
                            <tr>
                                <td>${entry.series.title}</td>
                                <td>${entry.number}</td>
                                <td>
                                    <div class="buttons is-centered">
                                        <button class="button is-danger" id="remove-series-${entry.series.id.value}-button" onclick="removeSeries(${entry.series.id.value})" type="button">
                                            <span class="icon">
                                                <i class="fa-solid fa-minus"></i>
                                            </span>
                                            <span>Remove</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        @endfor
                        <tr>
                            <td>@template.components.forms.select.series(label = "", options = series.sorted())</td>
                            <td>@template.components.forms.input_number(label = "", name = "series-number")</td>
                            <td>
                                <div class="buttons is-centered">
                                    <button class="button is-success" id="add-series-button" onclick="addSeries()" type="button">
                                        <span class="icon">
                                            <i class="fa-solid fa-plus"></i>
                                        </span>
                                        <span>Add</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
        <div class="buttons is-multiline is-centered">
            <button class="button is-success" id="save-book-button" onclick="saveBook()" type="button">
                <span class="icon">
                    <i class="fa-solid fa-floppy-disk"></i>
                </span>
                <span>Save</span>
            </button>
            <button class="button is-warning" id="refresh-book-button" onclick="refreshBook()" type="button">
                <span class="icon">
                    <i class="fa-solid fa-rotate-left"></i>
                </span>
                <span>Refresh</span>
            </button>
        </div>
    </div>
</main>
@template.components.footer()
<script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
<script src="/static/js/scripts.js" type="text/javascript"></script>
<script type="text/javascript">
    function addCredit() {
        const caller = "add-credit-button";
        let form = document.getElementById("add-credit-form");
        let formData = Object.fromEntries(new FormData(form));
        console.log(formData);

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/credits", {
            method: "PATCH",
            headers: headers,
            body: JSON.stringify({
                "creatorId": formData["creator-id"],
                "roleId": formData["role-id"],
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            form.reset();
            window.location.reload();
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function removeCredit(roleId, creatorId) {
        @raw
            const caller = `remove-role-${roleId}-creator-${creatorId}-button`;
        @endraw

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/credits", {
            method: "DELETE",
            headers: headers,
            body: JSON.stringify({
                "creatorId": creatorId,
                "roleId": roleId,
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            window.location.reload();
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function addGenre() {
        const caller = "add-genre-button";
        let form = document.getElementById("add-genre-form");
        let formData = Object.fromEntries(new FormData(form));
        console.log(formData);

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/genres", {
            method: "PATCH",
            headers: headers,
            body: JSON.stringify({
                "id": formData["genre-id"],
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            form.reset();
            window.location.reload();
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function removeGenre(genreId) {
        @raw
            const caller = `remove-genre-${genreId}-button`;
        @endraw

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/genres", {
            method: "DELETE",
            headers: headers,
            body: JSON.stringify({
                "id": genreId,
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            window.location.reload();
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function addSeries() {
        const caller = "add-series-button";
        let form = document.getElementById("add-series-form");
        let formData = Object.fromEntries(new FormData(form));
        console.log(formData);

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/series", {
            method: "PATCH",
            headers: headers,
            body: JSON.stringify({
                "seriesId": formData["series-id"],
                "number": formData["series-number"] || null,
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            form.reset();
            window.location.reload();
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function removeSeries(seriesId) {
        @raw
            const caller = `remove-series-${seriesId}-button`;
        @endraw

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/series", {
            method: "DELETE",
            headers: headers,
            body: JSON.stringify({
                "id": seriesId,
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            window.location.reload();
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function saveBook() {
        const caller = "save-book-button";
        let form = document.getElementById("edit-book-form");
        let formData = Object.fromEntries(new FormData(form));
        console.log(formData);

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}", {
            method: "PATCH",
            headers: headers,
            body: JSON.stringify({
                "credits": [@for(entry in ForSupport.of(resource.credits))
                    {
                        "creatorId": ${entry.get().creator.id.value},
                        "roleId": ${entry.get().role.id.value},
                    }@if(!entry.isLast),@endif
                @endfor],
                "description": formData["description"].trim() || null,
                "format": formData["format"] || "PAPERBACK",
                "genreIds": ${resource.genres.map { it.id.value }.toList().toString()},
                "goodreadsId": formData["goodreads"].trim() || null,
                "googleBooksId": formData["google-books"].trim() || null,
                "imageUrl": formData["image-url"].trim() || null,
                "isCollected": ${resource.isCollected},
                "isbn": formData["isbn"].trim() || null,
                "libraryThingId": formData["library-thing"].trim() || null,
                "openLibraryId": formData["open-library"].trim() || null,
                "publishDate": formData["publish-date"].trim() || null,
                "publisherId": formData["publisher-id"] || null,
                "readers": [@for(entry in ForSupport.of(resource.readers))
                    {
                        @if(entry.get().readDate != null)
                            "readDate": "${entry.get().readDate!!.format(DATE_FORMATTER)}",
                        @else
                            "readDate": null,
                        @endif
                        "userId": ${entry.get().user.id.value},
                    }@if(!entry.isLast),@endif
                @endfor],
                "series": [@for(entry in ForSupport.of(resource.series))
                    {
                        "seriesId": ${entry.get().series.id.value},
                        "number": ${entry.get().number ?: 0}
                    }@if(!entry.isLast),@endif
                @endfor],
                "subtitle": formData["subtitle"].trim() || null,
                "title": formData["title"].trim(),
                "wisherIds": ${resource.wishers.map { it.id.value }.toList().toString()},
            }),
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            form.reset();
            window.location = "/books/${resource.id.value}";
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
    function refreshBook() {
        const caller = "refresh-book-button";

        addLoading(caller);
        fetch("/api/v0.0/books/${resource.id.value}/refresh", {
            method: "PUT",
            headers: headers,
        }).then((response) => {
            if (!response.ok)
                return Promise.reject(response);
            window.location = "/books/${resource.id.value}";
        }).catch((response) => response.json().then((msg) => {
            @raw
                alert(`${response.status} ${response.statusText} => ${msg.title}`);
            @endraw
        })).finally(() => removeLoading(caller));
    }
</script>
</body>
</html>