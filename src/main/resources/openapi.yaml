openapi: "3.0.3"
info:
  title: "Bookshelf API"
  description: "Lots and lots of well described and documented API."
  contact:
    name: "Jonah Jackson"
    url: "https://github.com/Buried-In-Code/Bookshelf"
    email: "BuriedInCode@tuta.io"
  license:
    name: "MIT License"
  version: "0.0.0"
servers:
  - url: "http://{server}:25710/api"
    variables:
      server:
        default: "127.0.0.1"
security: []
paths:
  "/books":
    get:
      tags:
        - "Book"
      summary: "List all Books"
      operationId: "listBooks"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BookEntry"
    post:
      tags:
        - "Book"
      summary: "Create Book"
      operationId: "createBook"
      requestBody:
        $ref: "#/components/requestBodies/BookInput"
      responses:
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
  "/books/{book-id}":
    get:
      tags:
        - "Book"
      summary: "Get Book by Id"
      operationId: "getBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "Book"
      summary: "Update Book"
      operationId: "updateBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/BookInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Delete Book"
      operationId: "deleteBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/import":
    post:
      tags:
        - "Book"
      summary: "Import Book"
      operationId: "importBook"
      parameters: []
      requestBody:
        $ref: "#/components/requestBodies/BookImport"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
  "/books/{book-id}/refresh":
    put:
      tags:
        - "Book"
      summary: "Refresh Book"
      operationId: "refreshBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/{book-id}/wish":
    patch:
      tags:
        - "Book"
      summary: "Wish Book"
      operationId: "wishBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Unwish Book"
      operationId: "unwishBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/{book-id}/collect":
    patch:
      tags:
        - "Book"
      summary: "Collect Book"
      operationId: "collectBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Discard Book"
      operationId: "discardBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/{book-id}/read":
    patch:
      tags:
        - "Book"
      summary: "Read Book"
      operationId: "readBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Unread Book"
      operationId: "unreadBook"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/{book-id}/credits":
    post:
      tags:
        - "Book"
      summary: "Add Credit to Book"
      operationId: "addBookCredit"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/BookCreditInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Remove Credit from Book"
      operationId: "removeBookCredit"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/BookCreditInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/{book-id}/genres":
    post:
      tags:
        - "Book"
      summary: "Add Genre to Book"
      operationId: "addBookGenre"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Remove Genre from Book"
      operationId: "removeBookGenre"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/books/{book-id}/series":
    post:
      tags:
        - "Book"
      summary: "Add Series to Book"
      operationId: "addBookSeries"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/BookSeriesInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Book"
      summary: "Remove Series from Book"
      operationId: "removeBookSeries"
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        $ref: "#/components/requestBodies/IdValue"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/creators":
    get:
      tags:
        - "Creator"
      summary: "List all Creators"
      operationId: "listCreators"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CreatorEntry"
    post:
      tags:
        - "Creator"
      summary: "Create Creator"
      operationId: "createCreator"
      requestBody:
        $ref: "#/components/requestBodies/CreatorInput"
      responses:
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Creator"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
  "/creators/{creator-id}":
    get:
      tags:
        - "Creator"
      summary: "Get Creator by Id"
      operationId: "getCreator"
      parameters:
        - $ref: "#/components/parameters/CreatorId"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Creator"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "Creator"
      summary: "Update Creator"
      operationId: "updateCreator"
      parameters:
        - $ref: "#/components/parameters/CreatorId"
      requestBody:
        $ref: "#/components/requestBodies/CreatorInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Creator"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Creator"
      summary: "Delete Creator"
      operationId: "deleteCreator"
      parameters:
        - $ref: "#/components/parameters/CreatorId"
      responses:
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/creators/{creator-id}/credits":
    post:
      tags:
        - "Creator"
      summary: "Add Credit to Creator"
      operationId: "addCreatorCredit"
      parameters:
        - $ref: "#/components/parameters/CreatorId"
      requestBody:
        $ref: "#/components/requestBodies/CreatorCreditInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Creator"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Creator"
      summary: "Remove Credit from Creator"
      operationId: "removeCreatorCredit"
      parameters:
        - $ref: "#/components/parameters/CreatorId"
      requestBody:
        $ref: "#/components/requestBodies/CreatorCreditInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Creator"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/genres":
    get:
      tags:
        - "Genre"
      summary: "List all Genres"
      operationId: "listGenres"
      parameters: []
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GenreEntry"
    post:
      tags:
        - "Genre"
      summary: "Create Genre"
      operationId: "createGenre"
      requestBody:
        $ref: "#/components/requestBodies/GenreInput"
      responses:
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
  "/genres/{genre-id}":
    get:
      tags:
        - "Genre"
      summary: "Get Genre by Id"
      operationId: "getGenre"
      parameters:
        - $ref: "#/components/parameters/GenreId"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "Genre"
      summary: "Update Genre"
      operationId: "updateGenre"
      parameters:
        - $ref: "#/components/parameters/GenreId"
      requestBody:
        $ref: "#/components/requestBodies/GenreInput"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - "Genre"
      summary: "Delete Genre"
      operationId: "deleteGenre"
      parameters:
        - $ref: "#/components/parameters/GenreId"
      responses:
        "204":
          description: "No Content"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  "/publishers":
    get:

components:
  parameters:
    BookId:
      in: "path"
      name: "book-id"
      required: true
      schema:
        type: "integer"
        format: "int64"
    CreatorId:
      in: "path"
      name: "creator-id"
      required: true
      schema:
        type: "integer"
        format: "int64"
    GenreId:
      in: "path"
      name: "genre-id"
      required: true
      schema:
        type: "integer"
        format: "int64"
  requestBodies:
    BookInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/BookInput"
      required: true
    BookCreditInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/BookCreditInput"
      required: true
    BookSeriesInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/BookSeriesInput"
      required: true
    ReaderInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ReaderInput"
      required: true
    IdValue:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/IdValue"
      required: true
    BookImport:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/BookImport"
      required: true
    CreatorInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/CreatorInput"
      required: true
    CreatorCreditInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/CreatorCreditInput"
      required: true
    GenreInput:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/GenreInput"
      required: true
  responses:
    BadRequest:
      description: "Bad Request"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: "Not Found"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Conflict:
      description: "Conflict"
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    ErrorResponse:
      type: "object"
      additionalProperties: false
      properties:
        title:
          type: "string"
        status:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "string"
          nullable: true
      required:
        - title
        - status
        - type
    BookEntry:
      type: "object"
      additionalProperties: false
      properties:
        bookId:
          type: "integer"
          format: "int64"
        description:
          type: "string"
          nullable: true
        format:
          $ref: "#/components/schemas/Format"
        goodreadsId:
          type: "string"
          nullable: true
        googleBooksId:
          type: "string"
          nullable: true
        imageUrl:
          type: "string"
          nullable: true
        isbn:
          type: "string"
          nullable: true
        isCollected:
          type: "boolean"
          default: false
        libraryThingId:
          type: "string"
          nullable: true
        openLibraryId:
          type: "string"
          nullable: true
        publishDate:
          type: "string"
          format: "date"
          nullable: true
        publisherId:
          type: "integer"
          format: "int64"
          nullable: true
        subtitle:
          type: "string"
          nullable: true
        title:
          type: "string"
      required:
        - bookId
        - format
        - isCollected
        - title
    Format:
      type: "string"
      default: PAPERBACK
      enum:
        - BOX_SET
        - GRAPHIC_NOVEL
        - HARDBACK
        - MANGA
        - PAPERBACK
        - TRADEPAPERBACK
    BookInput:
      type: "object"
      additionalProperties: false
      properties:
        credits:
          type: "array"
          items:
            $ref: "#/components/schemas/BookCreditInput"
          default: []
        description:
          type: "string"
          nullable: true
        format:
          $ref: "#/components/schemas/Format"
        genreIds:
          type: "array"
          items:
            type: "integer"
            format: "int64"
          default: []
        goodreadsId:
          type: "string"
          nullable: true
        googleBooksId:
          type: "string"
          nullable: true
        imageUrl:
          type: "string"
          nullable: true
        isbn:
          type: "string"
          nullable: true
        isCollected:
          type: "boolean"
          default: false
        libraryThingId:
          type: "string"
          nullable: true
        openLibraryId:
          type: "string"
          nullable: true
        publishDate:
          type: "string"
          format: "date"
          nullable: true
        publisherId:
          type: "integer"
          format: "int64"
          nullable: true
        readers:
          type: "array"
          items:
            $ref: "#/components/schemas/ReaderInput"
          default: []
        series:
          type: "array"
          items:
            $ref: "#/components/schemas/BookSeriesInput"
          default: []
        subtitle:
          type: "string"
          nullable: true
        title:
          type: "string"
        wisherIds:
          type: "array"
          items:
            type: "integer"
            format: "int64"
          default: []
      required:
        - title
    BookCreditInput:
      type: "object"
      additionalProperties: false
      properties:
        creatorId:
          type: "integer"
          format: "int64"
        roleId:
          type: "integer"
          format: "int64"
      required:
        - creatorId
        - roleId
    BookSeriesInput:
      type: "object"
      additionalProperties: false
      properties:
        number:
          type: "integer"
          format: "int32"
          nullable: true
        seriesId:
          type: "integer"
          format: "int64"
      required:
        - seriesId
    ReaderInput:
      type: "object"
      additionalProperties: false
      properties:
        readDate:
          type: "string"
          format: "date"
        userId:
          type: "integer"
          format: "int64"
      required:
        - userId
    Book:
      type: "object"
      additionalProperties: false
      properties:
        bookId:
          type: "integer"
          format: "int64"
        credits:
          type: "array"
          items:
            $ref: "#/components/schemas/BookCredit"
          default: []
        description:
          type: "string"
          nullable: true
        format:
          $ref: "#/components/schemas/Format"
        genres:
          type: "array"
          items:
            $ref: "#/components/schemas/GenreEntry"
          default: []
        goodreadsId:
          type: "string"
          nullable: true
        googleBooksId:
          type: "string"
          nullable: true
        imageUrl:
          type: "string"
          nullable: true
        isbn:
          type: "string"
          nullable: true
        isCollected:
          type: "boolean"
          default: false
        libraryThingId:
          type: "string"
          nullable: true
        openLibraryId:
          type: "string"
          nullable: true
        publishDate:
          type: "string"
          format: "date"
          nullable: true
        publisher:
          $ref: "#/components/schemas/PublisherEntry"
        readers:
          type: "array"
          items:
            $ref: "#/components/schemas/Reader"
          default: []
        series:
          type: "array"
          items:
            $ref: "#/components/schemas/BookSeries"
          default: []
        subtitle:
          type: "string"
          nullable: true
        title:
          type: "string"
        wishers:
          type: "array"
          items:
            $ref: "#/components/schemas/UserEntry"
          default: []
      required:
        - credits
        - format
        - genres
        - isCollected
        - readers
        - series
        - title
        - wishers
    BookCredit:
      type: "object"
      additionalProperties: false
      properties:
        creator:
          $ref: "#/components/schemas/CreatorEntry"
        role:
          $ref: "#/components/schemas/RoleEntry"
      required:
        - creator
        - role
    BookSeries:
      type: "object"
      additionalProperties: false
      properties:
        number:
          type: "integer"
          format: "int32"
          nullable: true
        series:
          $ref: "#/components/schemas/SeriesEntry"
      required:
        - series
    Reader:
      type: "object"
      additionalProperties: false
      properties:
        readDate:
          type: "string"
          format: "date"
          nullable: true
        user:
          $ref: "#/components/schemas/UserEntry"
      required:
        - user
    CreatorEntry:
      type: "object"
      additionalProperties: false
      properties:
        creatorId:
          type: "integer"
          format: "int64"
        imageUrl:
          type: "string"
          nullable: true
        name:
          type: "string"
      required:
        - creatorId
        - name
    CreatorInput:
      type: "object"
      additionalProperties: false
      properties:
        credits:
          type: "array"
          items:
            $ref: "#/components/schemas/CreatorCreditInput"
          default: []
        imageUrl:
          type: "string"
          nullable: true
        name:
          type: "string"
      required:
        - name
    CreatorCreditInput:
      type: "object"
      additionalProperties: false
      properties:
        bookId:
          type: "integer"
          format: "int64"
        roleId:
          type: "integer"
          format: "int64"
      required:
        - bookId
        - roleId
    Creator:
      type: "object"
      additionalProperties: false
      properties:
        creatorId:
          type: "integer"
          format: "int64"
        credits:
          type: "array"
          items:
            $ref: "#/components/schemas/CreatorCredit"
          default: []
        imageUrl:
          type: "string"
          nullable: true
        name:
          type: "string"
      required:
        - creatorId
        - credits
        - name
    CreatorCredit:
      type: "object"
      additionalProperties: false
      properties:
        book:
          $ref: "#/components/schemas/BookEntry"
        role:
          $ref: "#/components/schemas/RoleEntry"
      required:
        - book
        - role
    GenreEntry:
      type: "object"
      additionalProperties: false
      properties: {}
    GenreInput:
      type: "object"
      additionalProperties: false
      properties: {}
    Genre:
      type: "object"
      additionalProperties: false
      properties: {}
    PublisherEntry:
      type: "object"
      additionalProperties: false
      properties: {}
    RoleEntry:
      type: "object"
      additionalProperties: false
      properties: {}
    SeriesEntry:
      type: "object"
      additionalProperties: false
      properties: {}
    UserEntry:
      type: "object"
      additionalProperties: false
      properties: {}
    IdValue:
      type: "object"
      additionalProperties: false
      properties:
        id:
          type: "integer"
          format: "int64"
      required:
        - id
    BookImport:
      type: "object"
      additionalProperties: false
      properties:
        goodreadsId:
          type: "string"
          nullable: true
        googleBooksId:
          type: "string"
          nullable: true
        isCollected:
          type: "boolean"
          default: false
        isbn:
          type: "string"
          nullable: true
        libraryThingId:
          type: "string"
          nullable: true
        openLibraryId:
          type: "string"
          nullable: true
        wisherIds:
          type: "array"
          items:
            type: "integer"
            format: "int64"
          default: []